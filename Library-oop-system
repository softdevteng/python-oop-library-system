from typing import List

# Assignment: Design Your Own Class + Polymorphism Challenge
# Save as a new file (e.g., assignment1.py)



# --- Assignment 1: SmartDevice + Smartphone (inheritance, encapsulation) ---
class SmartDevice:
    """Base class representing a generic smart device with simple battery management."""
    def __init__(self, brand: str, model: str, battery_capacity: int) -> None:
        self.brand = brand
        self.model = model
        self._battery_capacity = max(0, battery_capacity)  # encapsulated internal value
        self._battery_level = self._battery_capacity  # start fully charged

    @property
    def battery_level(self) -> int:
        """Read-only battery level (percentage-like scale up to battery_capacity)."""
        return self._battery_level

    def charge(self, amount: int) -> None:
        """Charge the device by amount (clamped to capacity)."""
        if amount < 0:
            raise ValueError("Charge amount must be non-negative")
        self._battery_level = min(self._battery_capacity, self._battery_level + amount)

    def use(self, drain: int) -> None:
        """Use the device and drain battery (clamped to 0)."""
        if drain < 0:
            raise ValueError("Drain must be non-negative")
        self._battery_level = max(0, self._battery_level - drain)

    def info(self) -> str:
        return f"{self.brand} {self.model} | Battery: {self.battery_level}/{self._battery_capacity}"


class Smartphone(SmartDevice):
    """Smartphone extends SmartDevice with apps and telephony capabilities."""
    def __init__(self, brand: str, model: str, battery_capacity: int, phone_number: str) -> None:
        super().__init__(brand, model, battery_capacity)
        self.phone_number = phone_number
        self._apps: List[str] = []

    def install_app(self, app_name: str) -> None:
        if app_name not in self._apps:
            self._apps.append(app_name)

    def uninstall_app(self, app_name: str) -> None:
        if app_name in self._apps:
            self._apps.remove(app_name)

    def call(self, number: str) -> str:
        # calling consumes battery
        self.use(5)
        return f"Calling {number} from {self.phone_number}..."

    def info(self) -> str:
        apps_summary = ", ".join(self._apps) if self._apps else "no apps"
        return f"{super().info()} | Phone: {self.phone_number} | Apps: {apps_summary}"


# --- Activity 2: Polymorphism with Vehicles ---
class Vehicle:
    """Abstract-ish base class for vehicles. Subclasses override move()."""
    def __init__(self, name: str) -> None:
        self.name = name

    def move(self) -> str:
        """Each vehicle implements its own move behavior."""
        raise NotImplementedError("Subclasses must implement move()")


class Car(Vehicle):
    def __init__(self, name: str, make: str, seats: int) -> None:
        super().__init__(name)
        self.make = make
        self.seats = seats

    def move(self) -> str:
        return f"{self.name} (Car, {self.make}) is Driving 🚗"


class Plane(Vehicle):
    def __init__(self, name: str, airline: str, max_altitude_ft: int) -> None:
        super().__init__(name)
        self.airline = airline
        self.max_altitude_ft = max_altitude_ft

    def move(self) -> str:
        return f"{self.name} (Plane, {self.airline}) is Flying ✈️"


class Bicycle(Vehicle):
    def __init__(self, name: str, type_: str) -> None:
        super().__init__(name)
        self.type = type_

    def move(self) -> str:
        return f"{self.name} (Bicycle, {self.type}) is Pedaling 🚲"


# --- Example usage demonstrating constructors, inheritance, encapsulation, and polymorphism ---
if __name__ == "__main__":
    # Assignment 1 examples
    phone = Smartphone(brand="Aurora", model="A1", battery_capacity=100, phone_number="+123456789")
    phone.install_app("Maps")
    phone.install_app("Notes")
    print(phone.info())            # device info
    print(phone.call("+198765432"))  # telephony + battery drain
    print("Battery after call:", phone.battery_level)

    # Activity 2 examples — polymorphism
    vehicles: List[Vehicle] = [
        Car(name="Sedan-01", make="Velox", seats=5),
        Plane(name="Jet-Blue", airline="BlueWings", max_altitude_ft=35000),
        Bicycle(name="CityCruiser", type_="Hybrid"),
    ]

    for v in vehicles:
        # calls the appropriate move() implementation for each concrete class
        print(v.move())
